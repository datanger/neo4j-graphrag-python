#!/usr/bin/env python3
"""
批量测试MATLAB代码提取，打印每个文件的所有节点和关系类型
"""

import asyncio
import sys
from pathlib import Path

# Add the project root to the path
sys.path.insert(0, str(Path(__file__).parent))

from neo4j_graphrag.experimental.components.code_extractor.matlab.matlab_extractor import (
    MatlabExtractor, get_global_registry
)
from neo4j_graphrag.experimental.components.types import TextChunk, TextChunks, DocumentInfo
from neo4j_graphrag.experimental.components.code_extractor.matlab.requirements import SCHEMA

class MockLLM:
    """Mock LLM for testing."""
    async def generate(self, prompt: str) -> str:
        return "Mock description generated by LLM"

async def extract_and_print(file_path: str):
    print(f"\n===== Extracting: {file_path} =====")
    llm = MockLLM()
    extractor = MatlabExtractor(llm=llm, enable_post_processing=True)
    with open(file_path, 'r', encoding='utf-8') as f:
        script_content = f.read()
    chunk = TextChunk(text=script_content, index=0, metadata={"file_path": file_path})
    doc_info = DocumentInfo(path=file_path, file_name=Path(file_path).name, file_type="matlab")
    result = await extractor.run(
        chunks=TextChunks(chunks=[chunk]),
        schema=SCHEMA,
        document_info=doc_info,
        enable_post_processing=True,
        rebuild_data=True
    )
    graph = result.graph
    print(f"Nodes: {len(graph.nodes)} | Relationships: {len(graph.relationships)}")
    for node in graph.nodes:
        print(f"  Node: {getattr(node, 'label', None)} | id: {getattr(node, 'id', None)} | props: {getattr(node, 'properties', None)}")
    rel_types = set()
    for rel in graph.relationships:
        print(f"  Rel: {rel.start_node_id} -[{rel.type}]-> {rel.end_node_id} | start_type: {getattr(rel, 'start_node_type', None)} | end_type: {getattr(rel, 'end_node_type', None)}")
        rel_types.add(rel.type)
    print(f"  Relationship types in this file: {rel_types}")

async def main():
    """主函数"""
    m_dir = Path("tests/matlab_test/test_data")
    m_files = sorted(m_dir.glob("*.m"))
    if not m_files:
        print("No .m files found!")
        return
    for mfile in m_files:
        await extract_and_print(str(mfile))

if __name__ == "__main__":
    asyncio.run(main()) 