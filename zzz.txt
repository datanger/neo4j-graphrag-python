
You are a top-tier algorithm designed for extracting a labeled property graph schema in
structured formats.

Generate a generalized graph schema based on the input text. Identify key entity types,
their relationship types, and property types.

IMPORTANT RULES:
1. Return only abstract schema information, not concrete instances.
2. Use singular PascalCase labels for entity types (e.g., Person, Company, Product).
3. Use UPPER_SNAKE_CASE for relationship types (e.g., WORKS_FOR, MANAGES).
4. Include property definitions only when the type can be confidently inferred, otherwise omit them.
5. When defining potential_schema, ensure that every entity and relation mentioned exists in your entities and relations lists.
6. Do not create entity types that aren't clearly mentioned in the text.
7. Keep your schema minimal and focused on clearly identifiable patterns in the text.

Accepted property types are: BOOLEAN, DATE, DURATION, FLOAT, INTEGER, LIST,
LOCAL_DATETIME, LOCAL_TIME, POINT, STRING, ZONED_DATETIME, ZONED_TIME.

Return a valid JSON object that follows this precise structure:
{'node_types': ({'label': 'Function', 'description': 'A MATLAB function definition', 'properties': [{'name': 'name', 'type': 'STRING', 'description': 'Name of the function', 'required': False}, {'name': 'file_path', 'type': 'STRING', 'description': 'Path to the file containing the function', 'required': False}, {'name': 'line_range', 'type': 'STRING', 'description': 'Line range where the function is defined', 'required': False}, {'name': 'description', 'type': 'STRING', 'description': 'Function description from docstring', 'required': False}, {'name': 'parameters', 'type': 'STRING', 'description': 'List of function parameters', 'required': False}, {'name': 'returns', 'type': 'STRING', 'description': 'List of return values', 'required': False}], 'additional_properties': True}, {'label': 'Variable', 'description': 'A variable used in the code', 'properties': [{'name': 'name', 'type': 'STRING', 'description': 'Name of the variable', 'required': False}, {'name': 'file_path', 'type': 'STRING', 'description': 'Path to the file where the variable is defined', 'required': False}, {'name': 'line_range', 'type': 'LIST', 'description': 'List of tuples containing variable usage in script and corresponding line range, each tuple element is like (context, start_line, end_line)', 'required': False}], 'additional_properties': True}, {'label': 'Script', 'description': 'A MATLAB script file', 'properties': [{'name': 'name', 'type': 'STRING', 'description': 'Name of the script', 'required': False}, {'name': 'file_path', 'type': 'STRING', 'description': 'Path to the script file', 'required': False}, {'name': 'description', 'type': 'STRING', 'description': 'Script description', 'required': False}], 'additional_properties': True}), 'relationship_types': ({'label': 'CALLS', 'description': 'A function or script calls another function or script', 'properties': [], 'additional_properties': True}, {'label': 'USES', 'description': 'A function or script uses a variable which is defined in another function or script', 'properties': [], 'additional_properties': True}, {'label': 'DEFINES', 'description': 'A function or script defines a variable', 'properties': [], 'additional_properties': True}, {'label': 'ASSIGNED_TO', 'description': 'A variable is assigned to another variable which is defined in the same function or script', 'properties': [], 'additional_properties': True}), 'patterns': (('Function', 'CALLS', 'Function'), ('Function', 'CALLS', 'Script'), ('Script', 'CALLS', 'Function'), ('Script', 'CALLS', 'Script'), ('Function', 'USES', 'Variable'), ('Function', 'DEFINES', 'Variable'), ('Variable', 'ASSIGNED_TO', 'Variable')), 'additional_node_types': True, 'additional_relationship_types': True, 'additional_patterns': True}

Return Examples:
```json
{
  "nodes": [
    {
      "type": "Function",
      "id": "func1",
      "properties": {
        "name": "calculateSum",
        "file_path": "/path/to/matlab/functions/calc.m",
        "line_range": "10-25",
        "description": "Calculates the sum of two numbers",
        "parameters": "a, b",
        "returns": "result"
      }
    },
    {
      "type": "Variable",
      "id": "var1",
      "properties": {
        "name": "result",
        "file_path": "/path/to/matlab/functions/calc.m",
        "line_range": [
          ["function calculateSum", 10, 25]
        ]
      }
    },
    {
      "type": "Script",
      "id": "script1",
      "properties": {
        "name": "main_analysis",
        "file_path": "/path/to/matlab/scripts/main_analysis.m",
        "description": "Main analysis script that calls various functions"
      }
    },
    {
      "type": "Variable",
      "id": "var2",
      "properties": {
        "name": "data",
        "file_path": "/path/to/matlab/scripts/main_analysis.m",
        "line_range": [
          ["main script", 5, 5]
        ]
      }
    }
  ],
  "relationships": [
    {
      "type": "CALLS",
      "source_id": "script1",
      "source_type": "Script",
      "target_id": "func1",
      "target_type": "Function"
    },
    {
      "type": "USES",
      "source_id": "script1",
      "source_type": "Script",
      "target_id": "var2",
      "target_type": "Variable"
    },
    {
      "type": "DEFINES",
      "source_id": "func1",
      "source_type": "Function",
      "target_id": "var1",
      "target_type": "Variable"
    },
    {
      "type": "ASSIGNED_TO",
      "source_id": "var2",
      "source_type": "Variable",
      "target_id": "var1",
      "target_type": "Variable"
    }
  ]
}
```


File path:
+finbert/+internal/getSupportFilePath.m

Input text:
```matlab
function filePath = getSupportFilePath(modelName,fileName)
% getSupportFilePath   This function is for converting any differences
% between the model names presented to the user and the support files
% URLs.

% Copyright 2021 The MathWorks, Inc.
arguments
    modelName (1,1) string
    fileName (1,1) string
end
directory = finbert.internal.convertModelNameToDirectories(modelName);
sd = matlab.internal.examples.utils.getSupportFileDir();
localFile = fullfile(sd,"nnet",directory{:},fileName);
if exist(localFile,'file')~=2
    disp("Downloading "+fileName+" to: "+localFile);
end
fileURL = strjoin([directory,fileName],"/");
filePath = matlab.internal.examples.downloadSupportFile("nnet",fileURL);
end
```